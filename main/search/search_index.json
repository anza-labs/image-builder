{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"image-builder","text":"<p>The <code>image-builder</code> project provides a Kubernetes-native solution for automating the creation of customized LinuxKit-based images for deployment environments. It utilizes CRDs (Custom Resource Definitions) to define image specifications. The controller orchestrates the image-building process by creating ConfigMaps and Kubernetes Jobs, managing resources efficiently while updating the status of the custom resources. Built with flexibility and scalability in mind, the Image Builder integrates seamlessly into Kubernetes workflows, supporting extensibility through templates and customizable build parameters.</p>"},{"location":"#license","title":"License","text":"<p><code>image-builder</code> is licensed under the Apache-2.0.</p>"},{"location":"getting_started/0-introduction/","title":"Introduction","text":""},{"location":"getting_started/0-introduction/#installing-the-operator","title":"Installing the Operator","text":"<p>To install the <code>image-builder</code>, run the following commands. This will ensure you're always pulling the latest stable release from the operator\u2019s GitHub repository.</p> <pre><code>LATEST=\"$(curl -s 'https://api.github.com/repos/anza-labs/image-builder/releases/latest' | jq -r '.tag_name')\"\nkubectl apply -k \"https://github.com/anza-labs/image-builder/?ref=${LATEST}\"\n</code></pre> <p>This command:</p> <ol> <li>Fetches the latest release tag using the GitHub API.</li> <li>Applies the corresponding version of the <code>image-builder</code> to your Kubernetes cluster using <code>kubectl</code>.</li> </ol> <p>Once installed, the operator will begin monitoring the appropriate resources in your cluster based on the CRDs defined.</p>"},{"location":"getting_started/1-quickstart/","title":"Quick Start","text":""},{"location":"getting_started/1-quickstart/#minimal-image","title":"Minimal image","text":"<p>The following example demonstrates how to create a minimal image specification using the Image Builder API. This setup leverages the Container Object Storage Interface (COSI) for managing bucket credentials.</p> <p>Note</p> <p>You can use any of the object storage providers, that support S3 protocol and has COSI (v1alpha1) driver.</p> <p>Example of such drivers are:</p> <ul> <li>Ceph COSI</li> <li>Linode COSI Driver</li> </ul>"},{"location":"getting_started/1-quickstart/#example-configuration","title":"Example Configuration","text":"<pre><code>apiVersion: image-builder.anza-labs.dev/v1alpha1\nkind: Image\nmetadata:\n  name: minimal\nspec:\n  format: 'kernel+initrd'\n  configuration: |\n    kernel:\n      image: linuxkit/kernel:6.6.13\n      cmdline: \"console=tty0 console=ttyS0 console=ttyAMA0\"\n    init:\n      - linuxkit/init:e120ea2a30d906bd1ee1874973d6e4b1403b5ca3\n      - linuxkit/runc:6062483d748609d505f2bcde4e52ee64a3329f5f\n      - linuxkit/containerd:39301e7312f13eedf19bd5d5551af7b37001d435\n    onboot:\n      - name: dhcpcd\n        image: linuxkit/dhcpcd:e9e3580f2de00e73e7b316a007186d22fea056ee\n        command: [\"/sbin/dhcpcd\", \"--nobackground\", \"-f\", \"/dhcpcd.conf\", \"-1\"]\n    services:\n      - name: getty\n        image: linuxkit/getty:5d86a2ce2d890c14ab66b13638dcadf74f29218b\n        env:\n        - INSECURE=true\n  bucketCredentials:\n    name: s3-credentials\n</code></pre>"},{"location":"getting_started/1-quickstart/#applying-the-configuration","title":"Applying the Configuration","text":"<p>Save the above configuration into a file named <code>minimal-image.yaml</code>. You can then apply it using <code>kubectl</code>:</p> <pre><code>kubectl apply -f minimal-image.yaml\n</code></pre> <p>Once applied, you can verify the status and access the generated secrets as follows:</p> <pre><code>$ kubectl get images.image-builder.anza-labs.dev minimal\nNAME      READY\nminimal   true\n</code></pre> <p>To view the created secrets:</p> <pre><code>$ kubectl get secrets minimal\nNAME      TYPE     DATA   AGE\nminimal   Opaque   3      3m36s\n</code></pre> <p>To retrieve the key and presigned URL from the secret:</p> <pre><code>$ kubectl get secrets minimal -o=json | jq -r '.data.\"&lt;Output Name&gt;\"' | base64 -d\n&lt;Object Key&gt; = &lt;Presigned URL&gt;\n</code></pre> <p>You can then use e.g. mc to fetch the objects:</p> <pre><code>$ mc ls &lt;alias&gt;/&lt;bucket&gt;/default/minimal/kernel-initrd/\n[2024-12-30 18:57:13 CET]    42B STANDARD image-cmdline\n[2024-12-30 19:00:48 CET]  77MiB STANDARD image-initrd-img\n[2024-12-30 19:01:12 CET] 8.7MiB STANDARD image-kernel\n</code></pre>"},{"location":"reference/out/","title":"API Reference","text":""},{"location":"reference/out/#packages","title":"Packages","text":"<ul> <li>image-builder.anza-labs.dev/v1alpha1</li> </ul>"},{"location":"reference/out/#image-builderanza-labsdevv1alpha1","title":"image-builder.anza-labs.dev/v1alpha1","text":"<p>Package v1alpha1 contains API Schema definitions for the  v1alpha1 API group</p>"},{"location":"reference/out/#resource-types","title":"Resource Types","text":"<ul> <li>Image</li> <li>ImageList</li> </ul>"},{"location":"reference/out/#image","title":"Image","text":"<p>Image is the Schema for the images API.</p> <p>Appears in: - ImageList</p> Field Description Default Validation <code>apiVersion</code> string <code>image-builder.anza-labs.dev/v1alpha1</code> <code>kind</code> string <code>Image</code> <code>kind</code> string Kind is a string value representing the REST resource this object represents.Servers may infer this from the endpoint the client submits requests to.Cannot be updated.In CamelCase.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds <code>apiVersion</code> string APIVersion defines the versioned schema of this representation of an object.Servers should convert recognized schemas to the latest internal value, andmay reject unrecognized values.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> ImageSpec <code>status</code> ImageStatus"},{"location":"reference/out/#imagelist","title":"ImageList","text":"<p>ImageList contains a list of Image.</p> Field Description Default Validation <code>apiVersion</code> string <code>image-builder.anza-labs.dev/v1alpha1</code> <code>kind</code> string <code>ImageList</code> <code>kind</code> string Kind is a string value representing the REST resource this object represents.Servers may infer this from the endpoint the client submits requests to.Cannot be updated.In CamelCase.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds <code>apiVersion</code> string APIVersion defines the versioned schema of this representation of an object.Servers should convert recognized schemas to the latest internal value, andmay reject unrecognized values.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources <code>metadata</code> ListMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>items</code> Image array"},{"location":"reference/out/#imagespec","title":"ImageSpec","text":"<p>ImageSpec defines the desired state of Image.</p> <p>Appears in: - Image</p> Field Description Default Validation <code>builderImage</code> string BuilderImage indicates the container image to use for the Builder job. <code>builderVerbosity</code> integer BuilderVerbosity specifies log verbosity of the builder. 4 Maximum: 10 Minimum: 0  <code>resources</code> ResourceRequirements Resources describe the compute resource requirements. <code>affinity</code> Affinity Affinity specifies the scheduling constraints for Pods. <code>format</code> string Format specifies the image format. Enum: [aws docker dynamic-vhd gcp iso-bios iso-efi iso-efi-initrd kernel+initrd kernel+iso kernel+squashfs qcow2-bios qcow2-efi raw-bios raw-efi rpi3 tar tar-kernel-initrd vhd vmdk]  <code>configuration</code> string Configuration is a YAML formatted Linuxkit config. <code>result</code> LocalObjectReference Result is a local reference that lists downloadable objects, that are results of the image building.Defaults to the Image.Metadata.Name. <code>bucketCredentials</code> LocalObjectReference BucketCredentials is a reference to the credentials for S3, where the image will be stored."},{"location":"reference/out/#imagestatus","title":"ImageStatus","text":"<p>ImageStatus defines the observed state of Image.</p> <p>Appears in: - Image</p> Field Description Default Validation <code>ready</code> boolean Ready indicates whether the image is ready."}]}